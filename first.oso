OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: 
shader first
param	color	Cin	0 0 0		%read{1,1} %write{2147483647,-1}
param	float	Rin	0		%read{0,0} %write{2147483647,-1}
param	float	SSSin	0		%read{2,2} %write{2147483647,-1}
oparam	color	Cout	0 0 0		%read{39,259} %write{1,259}
oparam	float	Rout	0		%read{40,260} %write{0,260}
oparam	float	SSSout	0		%read{41,261} %write{2,261}
global	point	P	%read{10,208} %write{2147483647,-1}
global	float	v	%read{37,200} %write{2147483647,-1}
local	float	i	%read{8,182} %write{7,182}
local	float	freq	%read{8,208} %write{3,207}
local	float	pos	%read{8,189} %write{4,188}
local	color	low_freq_col	%read{2147483647,-1} %write{5,5}
local	color[4]	sCols	%read{2147483647,-1} %write{19,25}
local	color	stem_col	%read{39,39} %write{29,29}
local	float	fuzz	%read{35,199} %write{34,198}
local	float	top_stem_hole_pos	%read{39,41} %write{38,38}
local	float	stem_hole_pos	%read{52,203} %write{49,49}
local	color	stem_hole_col	%read{52,258} %write{51,51}
local	float	coef	%read{58,169} %write{55,116}
local	float	coef2	%read{58,257} %write{57,203}
local	point	UVW	%read{66,215} %write{61,205}
local	float	Scale	%read{66,215} %write{62,206}
local	float	Radius	%read{70,256} %write{63,212}
local	float	Col	%read{108,261} %write{64,257}
local	float	Dist	%read{70,256} %write{65,256}
local	point	pnt	%read{70,256} %write{66,215}
local	float	pri	%read{70,256} %write{67,256}
local	float	___327_x	%read{70,107} %write{69,107}
local	float	___329_y	%read{70,107} %write{70,107}
local	float	___331_z	%read{70,107} %write{70,107}
local	point	___332_rndpoint	%read{70,107} %write{70,107}
local	point	___332_dotcenter	%read{70,107} %write{70,107}
local	float	___332_dist	%read{70,107} %write{70,107}
local	float	___332_priority	%read{70,107} %write{70,107}
local	color	Dot_color	%read{112,259} %write{111,258}
local	float	___334_x	%read{131,168} %write{130,168}
local	float	___336_y	%read{131,168} %write{131,168}
local	float	___338_z	%read{131,168} %write{131,168}
local	point	___339_rndpoint	%read{131,168} %write{131,168}
local	point	___339_dotcenter	%read{131,168} %write{131,168}
local	float	___339_dist	%read{131,168} %write{131,168}
local	float	___339_priority	%read{131,168} %write{131,168}
local	float	bottom_center_small	%read{187,187} %write{186,186}
local	float	rad_dif	%read{212,212} %write{211,211}
local	float	___343_x	%read{219,256} %write{218,256}
local	float	___345_y	%read{219,256} %write{219,256}
local	float	___347_z	%read{219,256} %write{219,256}
local	point	___348_rndpoint	%read{219,256} %write{219,256}
local	point	___348_dotcenter	%read{219,256} %write{219,256}
local	float	___348_dist	%read{219,256} %write{219,256}
local	float	___348_priority	%read{219,256} %write{219,256}
const	float	$const1	0.600000024		%read{3,63} %write{2147483647,-1}
const	int	$const2	0		%read{4,242} %write{2147483647,-1}
const	string	$const3	"rgb"		%read{5,190} %write{2147483647,-1}
const	int	$const4	1		%read{21,227} %write{2147483647,-1}
const	float	$const5	1		%read{5,256} %write{2147483647,-1}
const	float	$const6	0.356999993		%read{5,5} %write{2147483647,-1}
const	float	$const7	0.0979999974		%read{5,20} %write{2147483647,-1}
const	int	$const8	10		%read{8,8} %write{2147483647,-1}
temp	int	$tmp1	%read{8,17} %write{8,17}
temp	int	$tmp2	%read{6,17} %write{7,17}
temp	float	$tmp3	%read{8,17} %write{8,17}
temp	float	$tmp4	%read{8,17} %write{8,17}
const	string	$const9	"perlin"		%read{11,177} %write{2147483647,-1}
temp	point	$tmp5	%read{8,17} %write{8,17}
const	int	$const10	3		%read{25,25} %write{2147483647,-1}
const	float	$const11	3		%read{11,11} %write{2147483647,-1}
temp	float	$tmp6	%read{8,17} %write{8,17}
temp	float	$tmp7	%read{8,17} %write{8,17}
const	float	$const12	2.70000005		%read{16,181} %write{2147483647,-1}
temp	color	$tmp8	%read{19,19} %write{18,18}
const	float	$const13	0.987999976		%read{18,26} %write{2147483647,-1}
const	float	$const14	0.57099998		%read{18,18} %write{2147483647,-1}
const	float	$const15	0.118000001		%read{18,18} %write{2147483647,-1}
temp	color	$tmp9	%read{21,21} %write{20,20}
const	float	$const16	0.42899999		%read{20,20} %write{2147483647,-1}
temp	color	$tmp10	%read{23,23} %write{22,22}
const	float	$const17	0.99000001		%read{22,185} %write{2147483647,-1}
const	float	$const18	0.335000008		%read{22,22} %write{2147483647,-1}
const	float	$const19	0.100000001		%read{22,183} %write{2147483647,-1}
const	int	$const20	2		%read{23,23} %write{2147483647,-1}
temp	color	$tmp11	%read{25,25} %write{24,24}
const	float	$const21	0.305999994		%read{24,24} %write{2147483647,-1}
const	float	$const22	0.109999999		%read{24,26} %write{2147483647,-1}
temp	color	$tmp12	%read{28,28} %write{26,26}
const	float	$const23	0.451000005		%read{26,26} %write{2147483647,-1}
temp	color	$tmp13	%read{28,28} %write{27,27}
const	float	$const24	0.989000022		%read{27,27} %write{2147483647,-1}
const	float	$const25	0.395000011		%read{27,27} %write{2147483647,-1}
const	float	$const26	0.104999997		%read{27,27} %write{2147483647,-1}
const	float	$const27	0.870999992		%read{29,29} %write{2147483647,-1}
const	float	$const28	0.549000025		%read{29,29} %write{2147483647,-1}
const	float	$const29	0.310000002		%read{29,29} %write{2147483647,-1}
const	int	$const30	32		%read{30,30} %write{2147483647,-1}
temp	float	$tmp14	%read{34,34} %write{33,33}
temp	float	$tmp15	%read{33,33} %write{32,32}
const	string	$const31	"uperlin"		%read{32,209} %write{2147483647,-1}
temp	point	$tmp16	%read{32,32} %write{31,31}
const	float	$const32	0.00499999989		%read{34,206} %write{2147483647,-1}
temp	float	$tmp17	%read{38,38} %write{37,37}
const	float	$const33	0.0219999999		%read{35,35} %write{2147483647,-1}
temp	float	$tmp18	%read{37,37} %write{35,35}
const	float	$const34	0.023		%read{36,36} %write{2147483647,-1}
temp	float	$tmp19	%read{37,37} %write{36,36}
const	float	$const35	0.699999988		%read{40,260} %write{2147483647,-1}
const	int	$const36	64		%read{42,194} %write{2147483647,-1}
temp	float	$tmp20	%read{46,46} %write{45,45}
temp	float	$tmp21	%read{45,45} %write{44,44}
temp	point	$tmp22	%read{44,44} %write{43,43}
const	float	$const37	0.00100000005		%read{46,46} %write{2147483647,-1}
const	float	$const38	0.993499994		%read{47,47} %write{2147483647,-1}
temp	float	$tmp23	%read{49,49} %write{47,47}
const	float	$const39	0.995000005		%read{48,48} %write{2147483647,-1}
temp	float	$tmp24	%read{49,49} %write{48,48}
temp	color	$tmp25	%read{51,51} %write{50,50}
const	float	$const40	0.39199999		%read{50,50} %write{2147483647,-1}
const	float	$const41	0.430999994		%read{50,50} %write{2147483647,-1}
const	float	$const42	0.349000007		%read{50,50} %write{2147483647,-1}
const	float	$const43	0.5		%read{51,212} %write{2147483647,-1}
const	float	$const44	0		%read{54,261} %write{2147483647,-1}
const	float	$const45	-0.100000001		%read{55,114} %write{2147483647,-1}
const	float	$const46	0.200000003		%read{55,114} %write{2147483647,-1}
const	float	$const47	0.00999999978		%read{57,190} %write{2147483647,-1}
temp	float	$tmp26	%read{57,57} %write{56,56}
const	string	$const48	"object"		%read{61,205} %write{2147483647,-1}
const	string	$const49	"transform"		%read{60,204} %write{2147483647,-1}
const	string	$const50	"common"		%read{61,205} %write{2147483647,-1}
const	float	$const51	0.0175000001		%read{62,62} %write{2147483647,-1}
const	int	$const52	-1		%read{67,226} %write{2147483647,-1}
temp	int	$tmp27	%read{70,107} %write{70,107}
temp	int	$tmp28	%read{68,107} %write{69,107}
temp	int	$tmp29	%read{70,107} %write{70,107}
temp	int	$tmp30	%read{70,107} %write{70,107}
temp	int	$tmp31	%read{70,107} %write{70,107}
temp	int	$tmp32	%read{70,107} %write{70,107}
temp	point	$tmp33	%read{70,107} %write{70,107}
temp	point	$tmp34	%read{70,107} %write{70,107}
temp	point	$tmp35	%read{70,107} %write{70,107}
temp	vector	$tmp36	%read{70,107} %write{70,107}
const	string	$const53	"cell"		%read{84,237} %write{2147483647,-1}
const	float	$const54	2		%read{84,237} %write{2147483647,-1}
const	float	$const55	0.899999976		%read{85,234} %write{2147483647,-1}
temp	vector	$tmp37	%read{70,107} %write{70,107}
temp	int	$tmp38	%read{70,107} %write{70,107}
temp	int	$tmp39	%read{70,107} %write{70,107}
temp	int	$tmp40	%read{70,107} %write{70,107}
temp	int	$tmp41	%read{70,107} %write{70,107}
temp	float	$tmp42	%read{70,107} %write{70,107}
temp	float	$tmp43	%read{70,107} %write{70,107}
const	float	$const56	1.58000004		%read{99,248} %write{2147483647,-1}
temp	float	$tmp44	%read{70,107} %write{70,107}
temp	float	$tmp45	%read{2147483647,-1} %write{70,107}
temp	float	$tmp46	%read{2147483647,-1} %write{70,107}
temp	float	$tmp47	%read{2147483647,-1} %write{70,107}
const	float	$const57	0.800000012		%read{109,109} %write{2147483647,-1}
temp	color	$tmp48	%read{111,111} %write{109,109}
temp	color	$tmp49	%read{111,111} %write{110,110}
const	float	$const58	0.075000003		%read{110,110} %write{2147483647,-1}
const	float	$const59	0.0149999997		%read{119,119} %write{2147483647,-1}
const	int	$const60	24		%read{120,207} %write{2147483647,-1}
const	float	$const61	0.400000006		%read{124,124} %write{2147483647,-1}
temp	float	$tmp50	%read{124,124} %write{123,123}
temp	float	$tmp51	%read{123,123} %write{122,122}
temp	point	$tmp52	%read{122,122} %write{121,121}
temp	int	$tmp53	%read{131,168} %write{131,168}
temp	int	$tmp54	%read{129,168} %write{130,168}
temp	int	$tmp55	%read{131,168} %write{131,168}
temp	int	$tmp56	%read{131,168} %write{131,168}
temp	int	$tmp57	%read{131,168} %write{131,168}
temp	int	$tmp58	%read{131,168} %write{131,168}
temp	point	$tmp59	%read{131,168} %write{131,168}
temp	point	$tmp60	%read{131,168} %write{131,168}
temp	point	$tmp61	%read{131,168} %write{131,168}
temp	vector	$tmp62	%read{131,168} %write{131,168}
temp	vector	$tmp63	%read{131,168} %write{131,168}
temp	int	$tmp64	%read{131,168} %write{131,168}
temp	int	$tmp65	%read{131,168} %write{131,168}
temp	int	$tmp66	%read{131,168} %write{131,168}
temp	int	$tmp67	%read{131,168} %write{131,168}
temp	float	$tmp68	%read{131,168} %write{131,168}
temp	float	$tmp69	%read{131,168} %write{131,168}
temp	float	$tmp70	%read{131,168} %write{131,168}
temp	float	$tmp71	%read{2147483647,-1} %write{131,168}
temp	float	$tmp72	%read{2147483647,-1} %write{131,168}
temp	float	$tmp73	%read{2147483647,-1} %write{131,168}
const	float	$const62	1.10000002		%read{170,170} %write{2147483647,-1}
const	int	$const63	7		%read{174,174} %write{2147483647,-1}
temp	int	$tmp74	%read{174,182} %write{174,182}
temp	int	$tmp75	%read{172,182} %write{173,182}
temp	float	$tmp76	%read{174,182} %write{174,182}
temp	float	$tmp77	%read{174,182} %write{174,182}
temp	point	$tmp78	%read{174,182} %write{174,182}
temp	float	$tmp79	%read{174,182} %write{174,182}
const	float	$const64	0.850000024		%read{184,184} %write{2147483647,-1}
temp	float	$tmp80	%read{186,186} %write{184,184}
temp	float	$tmp81	%read{186,186} %write{185,185}
const	float	$const65	0.0199999996		%read{190,190} %write{2147483647,-1}
temp	float	$tmp82	%read{198,198} %write{197,197}
temp	float	$tmp83	%read{197,197} %write{196,196}
temp	point	$tmp84	%read{196,196} %write{195,195}
const	float	$const66	0.0125000002		%read{198,198} %write{2147483647,-1}
const	float	$const67	0.0299999993		%read{199,199} %write{2147483647,-1}
temp	float	$tmp85	%read{201,201} %write{199,199}
temp	float	$tmp86	%read{201,201} %write{200,200}
temp	float	$tmp87	%read{211,211} %write{210,210}
temp	float	$tmp88	%read{210,210} %write{209,209}
temp	point	$tmp89	%read{209,209} %write{208,208}
temp	int	$tmp90	%read{219,256} %write{219,256}
temp	int	$tmp91	%read{217,256} %write{218,256}
temp	int	$tmp92	%read{219,256} %write{219,256}
temp	int	$tmp93	%read{219,256} %write{219,256}
temp	int	$tmp94	%read{219,256} %write{219,256}
temp	int	$tmp95	%read{219,256} %write{219,256}
temp	point	$tmp96	%read{219,256} %write{219,256}
temp	point	$tmp97	%read{219,256} %write{219,256}
temp	point	$tmp98	%read{219,256} %write{219,256}
temp	vector	$tmp99	%read{219,256} %write{219,256}
temp	vector	$tmp100	%read{219,256} %write{219,256}
temp	int	$tmp101	%read{219,256} %write{219,256}
temp	int	$tmp102	%read{219,256} %write{219,256}
temp	int	$tmp103	%read{219,256} %write{219,256}
temp	int	$tmp104	%read{219,256} %write{219,256}
temp	float	$tmp105	%read{219,256} %write{219,256}
temp	float	$tmp106	%read{219,256} %write{219,256}
temp	float	$tmp107	%read{219,256} %write{219,256}
temp	float	$tmp108	%read{2147483647,-1} %write{219,256}
temp	float	$tmp109	%read{2147483647,-1} %write{219,256}
temp	float	$tmp110	%read{2147483647,-1} %write{219,256}
const	float	$const68	0.300000012		%read{258,258} %write{2147483647,-1}
code ___main___
# first.osl:10
# 		Rout=Rin;
	assign		Rout Rin 	%filename{"first.osl"} %line{10} %argrw{"wr"}
# first.osl:11
# 		Cout=Cin;
	assign		Cout Cin 	%line{11} %argrw{"wr"}
# first.osl:12
# 		SSSout=SSSin;
	assign		SSSout SSSin 	%line{12} %argrw{"wr"}
# first.osl:17
# 	float freq=0.6;
	assign		freq $const1 	%line{17} %argrw{"wr"}
# first.osl:18
# 	float pos = 0;
	assign		pos $const2 	%line{18} %argrw{"wr"}
# first.osl:19
# 	color low_freq_col = color ("rgb", 1, 0.357, 0.098);
	color		low_freq_col $const3 $const5 $const6 $const7 	%line{19} %argrw{"wrrrr"}
# first.osl:21
# 	for(i=0;i<10;i+=1)
	for		$tmp2 8 10 17 18 	%line{21} %argrw{"r"}
	assign		i $const2 	%argrw{"wr"}
	lt		$tmp1 i $const8 	%argrw{"wrr"}
	neq		$tmp2 $tmp1 $const2 	%argrw{"wrr"}
# first.osl:23
# 		pos+=abs((float)noise("perlin",P*freq, 3))/(freq*freq);
	mul		$tmp5 P freq 	%line{23} %argrw{"wrr"}
	noise		$tmp4 $const9 $tmp5 $const11 	%argrw{"wrrr"}
	abs		$tmp3 $tmp4 	%argrw{"wr"}
	mul		$tmp6 freq freq 	%argrw{"wrr"}
	div		$tmp7 $tmp3 $tmp6 	%argrw{"wrr"}
	add		pos pos $tmp7 	%argrw{"wrr"}
# first.osl:24
# 		freq*=2.7;
	mul		freq freq $const12 	%line{24} %argrw{"wrr"}
# first.osl:21
# 	for(i=0;i<10;i+=1)
	add		i i $const5 	%line{21} %argrw{"wrr"}
# first.osl:29
# 			color("rgb",0.988, 0.571, 0.118),
	color		$tmp8 $const3 $const13 $const14 $const15 	%line{29} %argrw{"wrrrr"}
# first.osl:28
# 	color sCols[4]={
	aassign		sCols $const2 $tmp8 	%line{28} %argrw{"wrr"}
# first.osl:30
# 			color("rgb",0.988, 0.429, 0.098),
	color		$tmp9 $const3 $const13 $const16 $const7 	%line{30} %argrw{"wrrrr"}
# first.osl:28
# 	color sCols[4]={
	aassign		sCols $const4 $tmp9 	%line{28} %argrw{"wrr"}
# first.osl:31
# 			color("rgb",0.99, 0.335, 0.1),
	color		$tmp10 $const3 $const17 $const18 $const19 	%line{31} %argrw{"wrrrr"}
# first.osl:28
# 	color sCols[4]={
	aassign		sCols $const20 $tmp10 	%line{28} %argrw{"wrr"}
# first.osl:32
# 			color("rgb",1, 0.306, 0.11)
	color		$tmp11 $const3 $const5 $const21 $const22 	%line{32} %argrw{"wrrrr"}
# first.osl:28
# 	color sCols[4]={
	aassign		sCols $const10 $tmp11 	%line{28} %argrw{"wrr"}
# first.osl:36
# 	Cout = mix(color("rgb",0.988, 0.451, 0.11), color("rgb",0.989, 0.395, 0.105), pos);
	color		$tmp12 $const3 $const13 $const23 $const22 	%line{36} %argrw{"wrrrr"}
	color		$tmp13 $const3 $const24 $const25 $const26 	%argrw{"wrrrr"}
	mix		Cout $tmp12 $tmp13 pos 	%argrw{"wrrr"}
# first.osl:41
# 	color stem_col = color("rgb", 0.871, 0.549, 0.31);
	color		stem_col $const3 $const27 $const28 $const29 	%line{41} %argrw{"wrrrr"}
# first.osl:43
# 	freq = 32;
	assign		freq $const30 	%line{43} %argrw{"wr"}
# first.osl:44
# 	float fuzz = abs(noise("uperlin", P*freq))*0.005;
	mul		$tmp16 P freq 	%line{44} %argrw{"wrr"}
	noise		$tmp15 $const31 $tmp16 	%argrw{"wrr"}
	abs		$tmp14 $tmp15 	%argrw{"wr"}
	mul		fuzz $tmp14 $const32 	%argrw{"wrr"}
# first.osl:45
# 	float top_stem_hole_pos = 1 - smoothstep(0.022+fuzz, 0.023+fuzz, v);
	add		$tmp18 $const33 fuzz 	%line{45} %argrw{"wrr"}
	add		$tmp19 $const34 fuzz 	%argrw{"wrr"}
	smoothstep	$tmp17 $tmp18 $tmp19 v 	%argrw{"wrrr"}
	sub		top_stem_hole_pos $const5 $tmp17 	%argrw{"wrr"}
# first.osl:47
# 	Cout = mix(Cout, stem_col, top_stem_hole_pos);	
	mix		Cout Cout stem_col top_stem_hole_pos 	%line{47} %argrw{"wrrr"}
# first.osl:48
# 	Rout = mix(Rout, 0.7, top_stem_hole_pos);
	mix		Rout Rout $const35 top_stem_hole_pos 	%line{48} %argrw{"wrrr"}
# first.osl:49
# 	SSSout = mix(SSSout, 0.005, top_stem_hole_pos);
	mix		SSSout SSSout $const32 top_stem_hole_pos 	%line{49} %argrw{"wrrr"}
# first.osl:54
# 	freq = 64;
	assign		freq $const36 	%line{54} %argrw{"wr"}
# first.osl:55
# 	fuzz = abs(noise("uperlin", P*freq))*0.001;
	mul		$tmp22 P freq 	%line{55} %argrw{"wrr"}
	noise		$tmp21 $const31 $tmp22 	%argrw{"wrr"}
	abs		$tmp20 $tmp21 	%argrw{"wr"}
	mul		fuzz $tmp20 $const37 	%argrw{"wrr"}
# first.osl:56
# 	float stem_hole_pos = smoothstep(0.9935+fuzz, 0.995+fuzz, v);
	add		$tmp23 $const38 fuzz 	%line{56} %argrw{"wrr"}
	add		$tmp24 $const39 fuzz 	%argrw{"wrr"}
	smoothstep	stem_hole_pos $tmp23 $tmp24 v 	%argrw{"wrrr"}
# first.osl:57
# 	color stem_hole_col = color("rgb", 0.392, 0.431, 0.349)*0.5;
	color		$tmp25 $const3 $const40 $const41 $const42 	%line{57} %argrw{"wrrrr"}
	mul		stem_hole_col $tmp25 $const43 	%argrw{"wrr"}
# first.osl:60
# 	Cout = mix(Cout, stem_hole_col, stem_hole_pos);
	mix		Cout Cout stem_hole_col stem_hole_pos 	%line{60} %argrw{"wrrr"}
# first.osl:61
# 	Rout = mix(Rout, 0.7, stem_hole_pos);
	mix		Rout Rout $const35 stem_hole_pos 	%line{61} %argrw{"wrrr"}
# first.osl:62
# 	SSSout = mix(SSSout, 0, stem_hole_pos);
	mix		SSSout SSSout $const44 stem_hole_pos 	%line{62} %argrw{"wrrr"}
# first.osl:67
# 	float coef = smoothstep(-0.1, 0.2, v);
	smoothstep	coef $const45 $const46 v 	%line{67} %argrw{"wrrr"}
# first.osl:68
# 	float coef2 = smoothstep(0.01, 0.1, (1-v));
	sub		$tmp26 $const5 v 	%line{68} %argrw{"wrr"}
	smoothstep	coef2 $const47 $const19 $tmp26 	%argrw{"wrrr"}
# first.osl:69
# 	coef *= coef2;
	mul		coef coef coef2 	%line{69} %argrw{"wrr"}
# first.osl:70
# 	coef = mix(0, 1, coef);
	mix		coef $const44 $const5 coef 	%line{70} %argrw{"wrrr"}
# first.osl:72
# 	point UVW = transform("object", P);
	functioncall	$const49 62 	%line{72} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:285
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	UVW $const50 $const48 P 	%filename{"/opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h"} %line{285} %argrw{"wrrr"}
# first.osl:73
# 	float Scale  = 0.0175;
	assign		Scale $const51 	%filename{"first.osl"} %line{73} %argrw{"wr"}
# first.osl:74
# 	float Radius = 0.6*coef;
	mul		Radius $const1 coef 	%line{74} %argrw{"wrr"}
# first.osl:76
# 	float Col = 0;
	assign		Col $const2 	%line{76} %argrw{"wr"}
# first.osl:77
# 	float Dist   = 0;
	assign		Dist $const2 	%line{77} %argrw{"wr"}
# first.osl:79
# 	point pnt = UVW / Scale;
	div		pnt UVW Scale 	%line{79} %argrw{"wrr"}
# first.osl:80
# 	float pri = -1;
	assign		pri $const52 	%line{80} %argrw{"wr"}
# first.osl:82
#   for (float x = -1; x <= 1; x++)
	for		$tmp28 70 72 106 108 	%line{82} %argrw{"r"}
	assign		___327_x $const52 	%argrw{"wr"}
	le		$tmp27 ___327_x $const4 	%argrw{"wrr"}
	neq		$tmp28 $tmp27 $const2 	%argrw{"wrr"}
# first.osl:84
#     for (float y = -1; y <= 1; y++)
	for		$tmp30 74 76 104 106 	%line{84} %argrw{"r"}
	assign		___329_y $const52 	%argrw{"wr"}
	le		$tmp29 ___329_y $const4 	%argrw{"wrr"}
	neq		$tmp30 $tmp29 $const2 	%argrw{"wrr"}
# first.osl:86
# 			for(float z = -1; z <= 1; z++)
	for		$tmp32 78 80 102 104 	%line{86} %argrw{"r"}
	assign		___331_z $const52 	%argrw{"wr"}
	le		$tmp31 ___331_z $const4 	%argrw{"wrr"}
	neq		$tmp32 $tmp31 $const2 	%argrw{"wrr"}
# first.osl:88
# 				point rndpoint = floor(pnt) + point(x, y, z) + 0.00;
	floor		$tmp33 pnt 	%line{88} %argrw{"wr"}
	point		$tmp34 ___327_x ___329_y ___331_z 	%argrw{"wrrr"}
	add		$tmp35 $tmp33 $tmp34 	%argrw{"wrr"}
	add		___332_rndpoint $tmp35 $const44 	%argrw{"wrr"}
# first.osl:89
# 				point dotcenter = rndpoint + noise("cell", rndpoint, 2)*0.9;
	noise		$tmp36 $const53 ___332_rndpoint $const54 	%line{89} %argrw{"wrrr"}
	mul		$tmp37 $tmp36 $const55 	%argrw{"wrr"}
	add		___332_dotcenter ___332_rndpoint $tmp37 	%argrw{"wrr"}
# first.osl:90
# 				float dist = distance(dotcenter, pnt);
	distance	___332_dist ___332_dotcenter pnt 	%line{90} %argrw{"wrr"}
# first.osl:91
# 				float priority = noise("cell", rndpoint, 2);
	noise		___332_priority $const53 ___332_rndpoint $const54 	%line{91} %argrw{"wrrr"}
# first.osl:93
# 				if (dist < Radius && priority > pri)
	lt		$tmp38 ___332_dist Radius 	%line{93} %argrw{"wrr"}
	neq		$tmp39 $tmp38 $const2 	%argrw{"wrr"}
	if		$tmp39 95 95 	%argrw{"r"}
	gt		$tmp40 ___332_priority pri 	%argrw{"wrr"}
	neq		$tmp41 $tmp40 $const2 	%argrw{"wrr"}
	assign		$tmp39 $tmp41 	%argrw{"wr"}
	if		$tmp39 102 102 	%argrw{"r"}
# first.osl:95
# 					pri = priority;
	assign		pri ___332_priority 	%line{95} %argrw{"wr"}
# first.osl:96
# 					Dist   = dist / Radius;
	div		Dist ___332_dist Radius 	%line{96} %argrw{"wrr"}
# first.osl:97
# 					Col = pow(sin((1.0 - Dist) * 1.58), 1.0);
	sub		$tmp43 $const5 Dist 	%line{97} %argrw{"wrr"}
	mul		$tmp44 $tmp43 $const56 	%argrw{"wrr"}
	sin		$tmp42 $tmp44 	%argrw{"wr"}
	pow		Col $tmp42 $const5 	%argrw{"wrr"}
# first.osl:86
# 			for(float z = -1; z <= 1; z++)
	assign		$tmp45 ___331_z 	%line{86} %argrw{"wr"}
	add		___331_z ___331_z $const5 	%argrw{"wrr"}
# first.osl:84
#     for (float y = -1; y <= 1; y++)
	assign		$tmp46 ___329_y 	%line{84} %argrw{"wr"}
	add		___329_y ___329_y $const5 	%argrw{"wrr"}
# first.osl:82
#   for (float x = -1; x <= 1; x++)
	assign		$tmp47 ___327_x 	%line{82} %argrw{"wr"}
	add		___327_x ___327_x $const5 	%argrw{"wrr"}
# first.osl:102
# 	Col *= coef;
	mul		Col Col coef 	%line{102} %argrw{"wrr"}
# first.osl:104
# 	color Dot_color = Cout*0.8+color("rgb", 0.075, 0, 0);
	mul		$tmp48 Cout $const57 	%line{104} %argrw{"wrr"}
	color		$tmp49 $const3 $const58 $const44 $const44 	%argrw{"wrrrr"}
	add		Dot_color $tmp48 $tmp49 	%argrw{"wrr"}
# first.osl:105
# 	Cout = mix(Cout, Dot_color, Col);
	mix		Cout Cout Dot_color Col 	%line{105} %argrw{"wrrr"}
# first.osl:106
# 	SSSout = mix(SSSout, 0.1, Col);
	mix		SSSout SSSout $const19 Col 	%line{106} %argrw{"wrrr"}
# first.osl:110
# 	coef = smoothstep(-0.1, 0.2, v);
	smoothstep	coef $const45 $const46 v 	%line{110} %argrw{"wrrr"}
# first.osl:111
# 	coef = mix(0, 1, coef);
	mix		coef $const44 $const5 coef 	%line{111} %argrw{"wrrr"}
# first.osl:112
# 	coef-=stem_hole_pos;
	sub		coef coef stem_hole_pos 	%line{112} %argrw{"wrr"}
# first.osl:114
# 	UVW = transform("object", P);
	functioncall	$const49 119 	%line{114} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:285
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	UVW $const50 $const48 P 	%filename{"/opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h"} %line{285} %argrw{"wrrr"}
# first.osl:115
# 	Scale  = 0.015;
	assign		Scale $const59 	%filename{"first.osl"} %line{115} %argrw{"wr"}
# first.osl:116
# 	freq = 24;
	assign		freq $const60 	%line{116} %argrw{"wr"}
# first.osl:117
# 	Radius = 0.4*abs(noise("uperlin", P*freq));
	mul		$tmp52 P freq 	%line{117} %argrw{"wrr"}
	noise		$tmp51 $const31 $tmp52 	%argrw{"wrr"}
	abs		$tmp50 $tmp51 	%argrw{"wr"}
	mul		Radius $const61 $tmp50 	%argrw{"wrr"}
# first.osl:119
# 	Col = 0;
	assign		Col $const2 	%line{119} %argrw{"wr"}
# first.osl:120
# 	Dist   = 0;
	assign		Dist $const2 	%line{120} %argrw{"wr"}
# first.osl:122
# 	pnt = UVW / Scale;
	div		pnt UVW Scale 	%line{122} %argrw{"wrr"}
# first.osl:123
# 	pri = -1;
	assign		pri $const52 	%line{123} %argrw{"wr"}
# first.osl:125
#   for (float x = -1; x <= 1; x++)
	for		$tmp54 131 133 167 169 	%line{125} %argrw{"r"}
	assign		___334_x $const52 	%argrw{"wr"}
	le		$tmp53 ___334_x $const4 	%argrw{"wrr"}
	neq		$tmp54 $tmp53 $const2 	%argrw{"wrr"}
# first.osl:127
#     for (float y = -1; y <= 1; y++)
	for		$tmp56 135 137 165 167 	%line{127} %argrw{"r"}
	assign		___336_y $const52 	%argrw{"wr"}
	le		$tmp55 ___336_y $const4 	%argrw{"wrr"}
	neq		$tmp56 $tmp55 $const2 	%argrw{"wrr"}
# first.osl:129
# 			for(float z = -1; z <= 1; z++)
	for		$tmp58 139 141 163 165 	%line{129} %argrw{"r"}
	assign		___338_z $const52 	%argrw{"wr"}
	le		$tmp57 ___338_z $const4 	%argrw{"wrr"}
	neq		$tmp58 $tmp57 $const2 	%argrw{"wrr"}
# first.osl:131
# 				point rndpoint = floor(pnt) + point(x, y, z) + 0.00;
	floor		$tmp59 pnt 	%line{131} %argrw{"wr"}
	point		$tmp60 ___334_x ___336_y ___338_z 	%argrw{"wrrr"}
	add		$tmp61 $tmp59 $tmp60 	%argrw{"wrr"}
	add		___339_rndpoint $tmp61 $const44 	%argrw{"wrr"}
# first.osl:132
# 				point dotcenter = rndpoint + noise("cell", rndpoint, 2)*0.9;
	noise		$tmp62 $const53 ___339_rndpoint $const54 	%line{132} %argrw{"wrrr"}
	mul		$tmp63 $tmp62 $const55 	%argrw{"wrr"}
	add		___339_dotcenter ___339_rndpoint $tmp63 	%argrw{"wrr"}
# first.osl:133
# 				float dist = distance(dotcenter, pnt);
	distance	___339_dist ___339_dotcenter pnt 	%line{133} %argrw{"wrr"}
# first.osl:134
# 				float priority = noise("cell", rndpoint, 2);
	noise		___339_priority $const53 ___339_rndpoint $const54 	%line{134} %argrw{"wrrr"}
# first.osl:136
# 				if (dist < Radius && priority > pri)
	lt		$tmp64 ___339_dist Radius 	%line{136} %argrw{"wrr"}
	neq		$tmp65 $tmp64 $const2 	%argrw{"wrr"}
	if		$tmp65 156 156 	%argrw{"r"}
	gt		$tmp66 ___339_priority pri 	%argrw{"wrr"}
	neq		$tmp67 $tmp66 $const2 	%argrw{"wrr"}
	assign		$tmp65 $tmp67 	%argrw{"wr"}
	if		$tmp65 163 163 	%argrw{"r"}
# first.osl:138
# 					pri = priority;
	assign		pri ___339_priority 	%line{138} %argrw{"wr"}
# first.osl:139
# 					Dist   = dist / Radius;
	div		Dist ___339_dist Radius 	%line{139} %argrw{"wrr"}
# first.osl:140
# 					Col = pow(sin((1.0 - Dist) * 1.58), 1.0);
	sub		$tmp69 $const5 Dist 	%line{140} %argrw{"wrr"}
	mul		$tmp70 $tmp69 $const56 	%argrw{"wrr"}
	sin		$tmp68 $tmp70 	%argrw{"wr"}
	pow		Col $tmp68 $const5 	%argrw{"wrr"}
# first.osl:129
# 			for(float z = -1; z <= 1; z++)
	assign		$tmp71 ___338_z 	%line{129} %argrw{"wr"}
	add		___338_z ___338_z $const5 	%argrw{"wrr"}
# first.osl:127
#     for (float y = -1; y <= 1; y++)
	assign		$tmp72 ___336_y 	%line{127} %argrw{"wr"}
	add		___336_y ___336_y $const5 	%argrw{"wrr"}
# first.osl:125
#   for (float x = -1; x <= 1; x++)
	assign		$tmp73 ___334_x 	%line{125} %argrw{"wr"}
	add		___334_x ___334_x $const5 	%argrw{"wrr"}
# first.osl:145
# 	Col *= coef;
	mul		Col Col coef 	%line{145} %argrw{"wrr"}
# first.osl:148
# 	freq=1.1;
	assign		freq $const62 	%line{148} %argrw{"wr"}
# first.osl:149
# 	pos = 0;
	assign		pos $const2 	%line{149} %argrw{"wr"}
# first.osl:150
# 	for(i=0;i<7;i+=1)
	for		$tmp75 174 176 182 183 	%line{150} %argrw{"r"}
	assign		i $const2 	%argrw{"wr"}
	lt		$tmp74 i $const63 	%argrw{"wrr"}
	neq		$tmp75 $tmp74 $const2 	%argrw{"wrr"}
# first.osl:152
# 		pos+=abs((float)noise("perlin",P*freq))/(freq);
	mul		$tmp78 P freq 	%line{152} %argrw{"wrr"}
	noise		$tmp77 $const9 $tmp78 	%argrw{"wrr"}
	abs		$tmp76 $tmp77 	%argrw{"wr"}
	div		$tmp79 $tmp76 freq 	%argrw{"wrr"}
	add		pos pos $tmp79 	%argrw{"wrr"}
# first.osl:153
# 		freq*=2.7;
	mul		freq freq $const12 	%line{153} %argrw{"wrr"}
# first.osl:150
# 	for(i=0;i<7;i+=1)
	add		i i $const5 	%line{150} %argrw{"wrr"}
# first.osl:155
# 	pos=smoothstep(0.1,0.9,pos);
	smoothstep	pos $const19 $const55 pos 	%line{155} %argrw{"wrrr"}
# first.osl:156
# 	float bottom_center_small = smoothstep(0.85+fuzz,0.99+fuzz,v);
	add		$tmp80 $const64 fuzz 	%line{156} %argrw{"wrr"}
	add		$tmp81 $const17 fuzz 	%argrw{"wrr"}
	smoothstep	bottom_center_small $tmp80 $tmp81 v 	%argrw{"wrrr"}
# first.osl:157
# 	pos += bottom_center_small;
	add		pos pos bottom_center_small 	%line{157} %argrw{"wrr"}
# first.osl:158
# 	pos = smoothstep(0,1,pos);
	smoothstep	pos $const44 $const5 pos 	%line{158} %argrw{"wrrr"}
# first.osl:159
# 	Col *= pos;
	mul		Col Col pos 	%line{159} %argrw{"wrr"}
# first.osl:160
# 	Dot_color = color("rgb", 0.01, 0.02, 0.01);
	color		Dot_color $const3 $const47 $const65 $const47 	%line{160} %argrw{"wrrrr"}
# first.osl:162
# 	Cout = mix(Cout, Dot_color, Col);
	mix		Cout Cout Dot_color Col 	%line{162} %argrw{"wrrr"}
# first.osl:163
# 	Rout = mix(Rout, 0.7, Col);
	mix		Rout Rout $const35 Col 	%line{163} %argrw{"wrrr"}
# first.osl:164
# 	SSSout = mix(SSSout, 0, Col);
	mix		SSSout SSSout $const44 Col 	%line{164} %argrw{"wrrr"}
# first.osl:169
# 	freq = 64;
	assign		freq $const36 	%line{169} %argrw{"wr"}
# first.osl:170
# 	fuzz = abs(noise("uperlin", P*freq))*0.0125;
	mul		$tmp84 P freq 	%line{170} %argrw{"wrr"}
	noise		$tmp83 $const31 $tmp84 	%argrw{"wrr"}
	abs		$tmp82 $tmp83 	%argrw{"wr"}
	mul		fuzz $tmp82 $const66 	%argrw{"wrr"}
# first.osl:171
# 	coef2 = smoothstep(0.005, 0.03+fuzz, (1-v));
	add		$tmp85 $const67 fuzz 	%line{171} %argrw{"wrr"}
	sub		$tmp86 $const5 v 	%argrw{"wrr"}
	smoothstep	coef2 $const32 $tmp85 $tmp86 	%argrw{"wrrr"}
# first.osl:172
# 	coef2 = mix(1, 0, coef2);
	mix		coef2 $const5 $const44 coef2 	%line{172} %argrw{"wrrr"}
# first.osl:173
# 	coef2-=stem_hole_pos;
	sub		coef2 coef2 stem_hole_pos 	%line{173} %argrw{"wrr"}
# first.osl:175
# 	UVW = transform("object", P);
	functioncall	$const49 206 	%line{175} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:285
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	UVW $const50 $const48 P 	%filename{"/opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h"} %line{285} %argrw{"wrrr"}
# first.osl:176
# 	Scale  = 0.005;
	assign		Scale $const32 	%filename{"first.osl"} %line{176} %argrw{"wr"}
# first.osl:177
# 	freq = 24;
	assign		freq $const60 	%line{177} %argrw{"wr"}
# first.osl:178
# 	float rad_dif = smoothstep(0, 0.5, abs(noise("uperlin", P*freq)));
	mul		$tmp89 P freq 	%line{178} %argrw{"wrr"}
	noise		$tmp88 $const31 $tmp89 	%argrw{"wrr"}
	abs		$tmp87 $tmp88 	%argrw{"wr"}
	smoothstep	rad_dif $const44 $const43 $tmp87 	%argrw{"wrrr"}
# first.osl:179
# 	Radius = 0.5*rad_dif;
	mul		Radius $const43 rad_dif 	%line{179} %argrw{"wrr"}
# first.osl:181
# 	Col = 0;
	assign		Col $const2 	%line{181} %argrw{"wr"}
# first.osl:182
# 	Dist   = 0;
	assign		Dist $const2 	%line{182} %argrw{"wr"}
# first.osl:184
# 	pnt = UVW / Scale;
	div		pnt UVW Scale 	%line{184} %argrw{"wrr"}
# first.osl:185
# 	pri = -1;
	assign		pri $const52 	%line{185} %argrw{"wr"}
# first.osl:187
#   for (float x = -1; x <= 1; x++)
	for		$tmp91 219 221 255 257 	%line{187} %argrw{"r"}
	assign		___343_x $const52 	%argrw{"wr"}
	le		$tmp90 ___343_x $const4 	%argrw{"wrr"}
	neq		$tmp91 $tmp90 $const2 	%argrw{"wrr"}
# first.osl:189
#     for (float y = -1; y <= 1; y++)
	for		$tmp93 223 225 253 255 	%line{189} %argrw{"r"}
	assign		___345_y $const52 	%argrw{"wr"}
	le		$tmp92 ___345_y $const4 	%argrw{"wrr"}
	neq		$tmp93 $tmp92 $const2 	%argrw{"wrr"}
# first.osl:191
# 			for(float z = -1; z <= 1; z++)
	for		$tmp95 227 229 251 253 	%line{191} %argrw{"r"}
	assign		___347_z $const52 	%argrw{"wr"}
	le		$tmp94 ___347_z $const4 	%argrw{"wrr"}
	neq		$tmp95 $tmp94 $const2 	%argrw{"wrr"}
# first.osl:193
# 				point rndpoint = floor(pnt) + point(x, y, z) + 0.00;
	floor		$tmp96 pnt 	%line{193} %argrw{"wr"}
	point		$tmp97 ___343_x ___345_y ___347_z 	%argrw{"wrrr"}
	add		$tmp98 $tmp96 $tmp97 	%argrw{"wrr"}
	add		___348_rndpoint $tmp98 $const44 	%argrw{"wrr"}
# first.osl:194
# 				point dotcenter = rndpoint + noise("cell", rndpoint, 2)*0.9;
	noise		$tmp99 $const53 ___348_rndpoint $const54 	%line{194} %argrw{"wrrr"}
	mul		$tmp100 $tmp99 $const55 	%argrw{"wrr"}
	add		___348_dotcenter ___348_rndpoint $tmp100 	%argrw{"wrr"}
# first.osl:195
# 				float dist = distance(dotcenter, pnt);
	distance	___348_dist ___348_dotcenter pnt 	%line{195} %argrw{"wrr"}
# first.osl:196
# 				float priority = noise("cell", rndpoint, 2);
	noise		___348_priority $const53 ___348_rndpoint $const54 	%line{196} %argrw{"wrrr"}
# first.osl:198
# 				if (dist < Radius && priority > pri)
	lt		$tmp101 ___348_dist Radius 	%line{198} %argrw{"wrr"}
	neq		$tmp102 $tmp101 $const2 	%argrw{"wrr"}
	if		$tmp102 244 244 	%argrw{"r"}
	gt		$tmp103 ___348_priority pri 	%argrw{"wrr"}
	neq		$tmp104 $tmp103 $const2 	%argrw{"wrr"}
	assign		$tmp102 $tmp104 	%argrw{"wr"}
	if		$tmp102 251 251 	%argrw{"r"}
# first.osl:200
# 					pri = priority;
	assign		pri ___348_priority 	%line{200} %argrw{"wr"}
# first.osl:201
# 					Dist   = dist / Radius;
	div		Dist ___348_dist Radius 	%line{201} %argrw{"wrr"}
# first.osl:202
# 					Col = pow(sin((1.0 - Dist) * 1.58), 1.0);
	sub		$tmp106 $const5 Dist 	%line{202} %argrw{"wrr"}
	mul		$tmp107 $tmp106 $const56 	%argrw{"wrr"}
	sin		$tmp105 $tmp107 	%argrw{"wr"}
	pow		Col $tmp105 $const5 	%argrw{"wrr"}
# first.osl:191
# 			for(float z = -1; z <= 1; z++)
	assign		$tmp108 ___347_z 	%line{191} %argrw{"wr"}
	add		___347_z ___347_z $const5 	%argrw{"wrr"}
# first.osl:189
#     for (float y = -1; y <= 1; y++)
	assign		$tmp109 ___345_y 	%line{189} %argrw{"wr"}
	add		___345_y ___345_y $const5 	%argrw{"wrr"}
# first.osl:187
#   for (float x = -1; x <= 1; x++)
	assign		$tmp110 ___343_x 	%line{187} %argrw{"wr"}
	add		___343_x ___343_x $const5 	%argrw{"wrr"}
# first.osl:207
# 	Col *= coef2;
	mul		Col Col coef2 	%line{207} %argrw{"wrr"}
# first.osl:208
# 	Dot_color = stem_hole_col*0.3;
	mul		Dot_color stem_hole_col $const68 	%line{208} %argrw{"wrr"}
# first.osl:210
# 	Cout = mix(Cout, Dot_color, Col);
	mix		Cout Cout Dot_color Col 	%line{210} %argrw{"wrrr"}
# first.osl:211
# 	Rout = mix(Rout, 0.7, Col);
	mix		Rout Rout $const35 Col 	%line{211} %argrw{"wrrr"}
# first.osl:212
# 	SSSout = mix(SSSout, 0, Col);
	mix		SSSout SSSout $const44 Col 	%line{212} %argrw{"wrrr"}
	end
